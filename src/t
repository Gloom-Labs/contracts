import { getFirebaseAdminInstance } from '@/config/firebase/admin'
import { usersCollectionName } from '@/config/firebase/collections'
import { User } from '@/domain/interfaces/users'
import { NextRequest, NextResponse, userAgent } from 'next/server'
import { UserAnalytics } from '@/app/api/types'

export async function POST(req: NextRequest) {
  const admin = getFirebaseAdminInstance()

  const data: User = await req.json()

  if (!data || !data.stxAddress) {
    return NextResponse.json(
      { status: 'error', message: 'Invalid data!' },
      { status: 400 }
    )
  }

  const analytics: UserAnalytics = {
    lastSync: {
      timestamp: admin.firestore.FieldValue.serverTimestamp(),
      ip: req.ip,
      geo: req.geo,
      userAgent: userAgent(req)
    }
  }

  const dataWithAnalytics = { ...data, analytics }

  const userExists = await admin
    .firestore()
    .collection(usersCollectionName)
    .where('stxAddress', '==', data.stxAddress)
    .get()

  if (!userExists.empty) {
    // update users last sync timestamp
    const userDoc = userExists.docs[0]

    // add createdAt if it doesn't exist
    if (!userDoc.data().createdAt) {
      dataWithAnalytics.analytics.createdAt =
        admin.firestore.FieldValue.serverTimestamp()
    }
    // update user with new analytics
    userDoc.ref.update(dataWithAnalytics)

    return NextResponse.json(
      { status: 'ok', message: 'User already synced!' },
      { status: 200 }
    )
  }

  // add createdAt to dataWithAnalytics
  dataWithAnalytics.analytics.createdAt =
    admin.firestore.FieldValue.serverTimestamp()
  // create new user
  admin.firestore().collection(usersCollectionName).add(dataWithAnalytics)

  return NextResponse.json(
    { status: 'ok', message: 'User created!' },
    {
      status: 201
    }
  )
}
